version: 2

alltags: &alltags
  filters:
    tags:
      only: /((?!SNAPSHOT).)*/
restoremavencache: &restoremavencache
  keys:
    - maven-repo-v5-{{ .Branch }}-{{ checksum "pom.xml" }}
    - maven-repo-v5-{{ .Branch }}-
    - maven-repo-v5-
mainenvironment: &mainenvironment
  MAVEN_OPTS: -Xmx3200m
  BUILD_ARGS: -B -DskipFormat -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
setup: &setup
  docker:
    - image: circleci/openjdk:11-jdk-browsers
      environment: *mainenvironment
  working_directory: ~/orko

notify:
  webhooks:
    - url: https://webhooks.gitter.im/e/d1538bdca20be1aa31d8

workflows:
  version: 2
  all:
    jobs:
      - "Compile and build": *alltags
      - "Unit tests (all)":
          requires:
            - "Compile and build"
          <<: *alltags
      - "Unit tests (MySQL)":
          requires:
            - "Compile and build"
          <<: *alltags
      - "End-to-end tests":
          requires:
            - "Compile and build"
          <<: *alltags
      - "Deploy release to Docker registry":
          requires:
            - "Unit tests (all)"
            - "Unit tests (MySQL)"
            - "End-to-end tests"
          filters:
            tags:
              only: /^.*\.((?!SNAPSHOT).)*/
      - "Deploy release to GitHub":
          requires:
            - "Unit tests (all)"
            - "Unit tests (MySQL)"
            - "End-to-end tests"
          filters:
            tags:
              only: /^.*\.((?!SNAPSHOT).)*/
            branches:
              only:
                - master

jobs:
  "Compile and build":
    <<: *setup
    steps:
      - checkout
      - restore_cache: *restoremavencache
      - restore_cache:
          keys:
            - node-v5-{{ .Branch }}-{{ checksum "orko-ui/package-lock.json" }}
            - node-v5-{{ .Branch }}-
            - node-v5-
      - run:
          name: Build
          command: mvn ${BUILD_ARGS} -T 1C -U -Pui,bundle,services clean install -Dskip.failsafe.tests=true -DskipTests=true
      - save_cache:
          paths:
            - ~/.m2
          key: maven-repo-v5-{{ .Branch }}-{{ checksum "pom.xml" }}
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
          key: node-v5-{{ .Branch }}-{{ checksum "orko-ui/package-lock.json" }}}
      - run:
          name: Remove unnecessary node artifacts before saving workspace
          command: |
            rm -rf orko-ui/node
            rm -rf orko-ui/node_modules
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - orko
      - run:
          name: Saving checkstyle reports
          command: |
            mkdir -p ~/checkstyle/
            find . -type f -regex ".*/target/checkstyle-result.xml" -exec cp {} ~/checkstyle \;
          when: always
      - store_artifacts:
          path: ~/checkstyle

  "Unit tests (all)":
    <<: *setup
    steps:
      - attach_workspace:
          at: /home/circleci
      - restore_cache: *restoremavencache
      - run:
          name: Upgrade Maven
          command: |
            cd
            cp ~/orko/.circleci/apache-maven-3.6.1-bin.tar.gz .
            tar xzvf apache-maven-3.6.1-bin.tar.gz
            cd ~/orko
      - run:
          name: Tests (plus Sonar if possible)
          command: |
            if [[ -n "$SONARQUBE_TOKEN" ]]; then
              echo "Build and Sonar"
              export PATH=/home/circleci/apache-maven-3.6.1/bin:$PATH
              export SONAR_TARGETS="-Pci,services, org.jacoco:jacoco-maven-plugin:prepare-agent@default-prepare-agent surefire:test org.jacoco:jacoco-maven-plugin:report@default-report sonar:sonar"
              export SONAR_ARGS="-Dsonar.host.url=https://sonarcloud.io \
                  -Dsonar.organization=${CIRCLE_PROJECT_USERNAME} \
                  -Dsonar.login=${SONARQUBE_TOKEN}
                  -Dskip.failsafe.tests=true"
              if [[ -n "$CIRCLE_BRANCH" ]]; then
                mvn ${BUILD_ARGS} -T 1C ${SONAR_TARGETS} ${SONAR_ARGS} \
                  -Dsonar.branch.name=${CIRCLE_BRANCH}
              else
                if [[ -n "$CIRCLE_PULL_REQUEST" ]]; then
                  mvn ${BUILD_ARGS} -T 1C ${SONAR_TARGETS} ${SONAR_ARGS} \
                    -Dsonar.pullrequest.provider=github \
                    -Dsonar.pullrequest.github.repository=${CIRCLE_PR_REPONAME} \
                    -Dsonar.pullrequest.key=${CIRCLE_PULL_REQUEST}
                else
                   mvn ${BUILD_ARGS} -T 1C ${SONAR_TARGETS} ${SONAR_ARGS}
                fi
              fi
            else
              echo "Test only"
              mvn ${BUILD_ARGS} -T 1C surefire:test -Dskip.failsafe.tests=true
            fi
      - run:
          name: Saving test results (H2)
          command: |
            mkdir -p ~/junit/h2
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/h2 \;
          when: always
      - store_artifacts:
          path: ~/junit
      - store_test_results:
          path: ~/junit

  "End-to-end tests":
    <<: *setup
    steps:
      - run:
          name: apt update
          command: sudo rm -rf /var/lib/apt/lists/* && sudo apt-get update -y
      - run:
          name: Install packages
          command: sudo apt-get install xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libgbm-dev
      - attach_workspace:
          at: /home/circleci
      - restore_cache: *restoremavencache
      - restore_cache:
          keys:
            - node-e2e-v1-{{ .Branch }}-{{ checksum "orko-end-to-end-testing/package-lock.json" }}
            - node-e2e-v1-{{ .Branch }}-
            - node-e2e-v1-
      - run:
          name: Run integration tests
          command: |
            cd orko-end-to-end-testing
            mvn ${BUILD_ARGS} -Pe2etest verify
            cd ..
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
          key: node-e2e-v1-{{ .Branch }}-{{ checksum "orko-end-to-end-testing/package-lock.json" }}
      - run:
          name: Saving test results (Integration)
          command: |
            mkdir -p ~/junit/integration
            find . -type f -regex ".*/target/mocha-reports/.*xml" -exec cp {} ~/junit/integration \;
          when: always
      - store_artifacts:
          path: ~/junit
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: orko-end-to-end-testing/cypress/screenshots
      - store_artifacts:
          path: orko-end-to-end-testing/app.log

  "Unit tests (MySQL)":
    docker:
      - image: circleci/openjdk:11-jdk-browsers
        environment: *mainenvironment
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: test
          MYSQL_USER: open
          MYSQL_PASSWORD: sesame
    working_directory: ~/orko
    steps:
      - attach_workspace:
          at: /home/circleci
      - restore_cache: *restoremavencache
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 30`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: MySQL tests
          command: |
            mvn ${BUILD_ARGS} -Pdbonly,services surefire:test \
              -Dmorf.mysql.noadmin=true \
              -Dtestdb.url=mysql://open:sesame@127.0.0.1/test \
              -Dskip.failsafe.tests=true
      - run:
          name: Saving test results (MySQL)
          command: |
            mkdir -p ~/junit/mysql
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/mysql \;
          when: always
      - store_artifacts:
          path: ~/junit
      - store_test_results:
          path: ~/junit

  "Deploy release to Docker registry":
    <<: *setup
    steps:
      - attach_workspace:
          at: /home/circleci
      - restore_cache: *restoremavencache
      - run:
          name: Deploy release to Docker registry
          command: |
            export PROFILES="-Pui,docker,services"
            if [[ (-n "$DOCKERHUB_USER") && (-n "$DOCKERHUB_PASSWORD") ]]; then
              export DOCKER_TARGET="jib:build"
            else
              echo "Docker Hub account details not supplied. Probably an external pull request. Building locally only"
              export DOCKERHUB_REPO=orko
              export DOCKER_TARGET="jib:buildTar"
            fi
            if [[ -n "$CIRCLE_TAG" ]]; then
              mvn ${BUILD_ARGS} $PROFILES $DOCKER_TARGET -Ddocker.tag="$CIRCLE_TAG"
            else
              if [[ "$CIRCLE_BRANCH" == "stable" ]]; then
                mvn ${BUILD_ARGS} $PROFILES $DOCKER_TARGET -Ddocker.tag="stable"
              else
                if [[ (-z "$CIRCLE_BRANCH") || ("$CIRCLE_BRANCH" == "master") ]]; then
                  mvn ${BUILD_ARGS} $PROFILES $DOCKER_TARGET -Ddocker.tag="latest"
                else
                  echo "Branch. Building locally only"
                  mvn ${BUILD_ARGS} $PROFILES jib:buildTar -Ddocker.tag="dev-$CIRCLE_SHA1"
                fi
              fi
            fi

  "Deploy release to GitHub":
    <<: *setup
    steps:
      - attach_workspace:
          at: /home/circleci
      - restore_cache: *restoremavencache
      - run:
          name: Release to GitHub
          command: |
            if [[ -n "$GITHUB_API_KEY" ]]; then
              cd orko-app
              if [[ -n "$CIRCLE_TAG" ]]; then
                mvn ${BUILD_ARGS} -Pui github-release:release \
                  --settings ../etc/.maven-settings.xml \
                  -Dgithub.commitish=$CIRCLE_SHA1 \
                  -Dgithub.draft=true \
                  -Dgithub.failOnExistingRelease=true \
                  -Dgithub.deleteRelease=false
              else
                if [[ (-z "$CIRCLE_BRANCH") || ("$CIRCLE_BRANCH" == "master") ]]; then
                  COMMIT_MESSAGE=`git log --format=%B -n 1 $CIRCLE_SHA1`
                  if [[ $COMMIT_MESSAGE != *"prepare release"* ]]; then
                    mvn ${BUILD_ARGS} -Pui github-release:release \
                      --settings ../etc/.maven-settings.xml \
                      -Dgithub.commitish=$CIRCLE_SHA1 \
                      -Dgithub.draft=false \
                      -Dgithub.failOnExistingRelease=false \
                      -Dgithub.deleteRelease=true
                  else
                    echo "Skipping pushing snapshot during a release"
                  fi
                else
                  echo "Not a tag or master branch"
                fi
              fi
            else
              echo "Github API key not set"
            fi
